name: CI/CD Pipeline - Medical Device Regulatory Assistant

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: medical-device-regulatory-assistant

jobs:
  # =============================================================================
  # TESTING JOBS
  # =============================================================================

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./medical-device-regulatory-assistant

      - name: Run ESLint
        run: pnpm lint
        working-directory: ./medical-device-regulatory-assistant

      - name: Run Prettier check
        run: pnpm format:check
        working-directory: ./medical-device-regulatory-assistant

      - name: Run TypeScript check
        run: pnpm type-check
        working-directory: ./medical-device-regulatory-assistant

      - name: Run unit tests
        run: pnpm test --coverage
        working-directory: ./medical-device-regulatory-assistant

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./medical-device-regulatory-assistant/coverage/lcov.info
          flags: frontend

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_medical_device_assistant
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: medical-device-regulatory-assistant/backend/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        working-directory: ./medical-device-regulatory-assistant/backend

      - name: Install project
        run: poetry install --no-interaction
        working-directory: ./medical-device-regulatory-assistant/backend

      - name: Run Black formatter check
        run: poetry run black --check .
        working-directory: ./medical-device-regulatory-assistant/backend

      - name: Run isort check
        run: poetry run isort --check-only .
        working-directory: ./medical-device-regulatory-assistant/backend

      - name: Run flake8 linting
        run: poetry run flake8 .
        working-directory: ./medical-device-regulatory-assistant/backend

      - name: Run mypy type checking
        run: poetry run mypy .
        working-directory: ./medical-device-regulatory-assistant/backend

      - name: Run pytest
        run: poetry run python -m pytest tests/ -v --cov=. --cov-report=xml
        working-directory: ./medical-device-regulatory-assistant/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_medical_device_assistant
          REDIS_URL: redis://localhost:6379
          TESTING: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./medical-device-regulatory-assistant/backend/coverage.xml
          flags: backend

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./medical-device-regulatory-assistant

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
        working-directory: ./medical-device-regulatory-assistant

      - name: Start services with Docker Compose
        run: docker-compose -f docker-compose.yml up -d --build
        working-directory: ./medical-device-regulatory-assistant
        env:
          NEXTAUTH_SECRET: test-secret
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

      - name: Run Playwright tests
        run: pnpm exec playwright test
        working-directory: ./medical-device-regulatory-assistant

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: medical-device-regulatory-assistant/playwright-report/
          retention-days: 30

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # BUILD AND PUSH DOCKER IMAGES
  # =============================================================================

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./medical-device-regulatory-assistant
          file: ./medical-device-regulatory-assistant/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./medical-device-regulatory-assistant
          file: ./medical-device-regulatory-assistant/Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could be kubectl, docker-compose, or cloud provider CLI commands

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, e2e-tests]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # This could be kubectl, docker-compose, or cloud provider CLI commands

      - name: Run post-deployment health checks
        run: |
          echo "Running post-deployment health checks..."
          # Add health check commands here

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful!"
          # Add notification logic (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback logic here
