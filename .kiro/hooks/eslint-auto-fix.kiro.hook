{
  "enabled": true,
  "name": "ESLint Auto-Fix & Comprehensive Report",
  "description": "Runs complete format and lint checking process with Prettier and ESLint, then generates a comprehensive single markdown report with all analysis, recommendations, and actionable fixes",
  "version": "2.0",
  "when": {
    "type": "userTriggered",
    "patterns": [
      "**/*.js",
      "**/*.jsx",
      "**/*.ts",
      "**/*.tsx",
      "**/*.mjs",
      "**/*.vue",
      "**/*.json"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Execute a comprehensive format and lint checking process following these steps:\n\n## Phase 1: Automated Fixes\n\n1. **Check for package.json and verify available scripts**\n   - Look for `package.json` in current directory\n   - Check if `format`, `lint`, `lint:fix` scripts exist\n   - If scripts don't exist, use direct npx commands\n\n2. **Run Prettier to fix code formatting issues**\n   - Try: `npm run format` (if script exists)\n   - Fallback: `npx prettier --write \"**/*.{js,jsx,ts,tsx,vue,json,md}\" --ignore-path .gitignore`\n   - Report: Number of files formatted and types of changes applied\n\n3. **Run ESLint to auto-fix linting issues**\n   - Try: `npm run lint:fix` (if script exists)\n   - Fallback: `npx eslint . --fix --ext .js,.jsx,.ts,.tsx,.vue`\n   - Report: Number of auto-fixable issues resolved by category\n\n## Phase 2: Analysis and Reporting\n\n4. **Analyze remaining issues**\n   - Try: `npm run lint` (if script exists)\n   - Fallback: `npx eslint . --ext .js,.jsx,.ts,.tsx,.vue --format json`\n   - Capture all remaining errors and warnings\n\n5. **Generate comprehensive single report**\n   - Create: `./ESLint-report/comprehensive-analysis-[YYYY-MM-DD-HH-mm].md`\n   - Use the following template structure:\n\n---\n\n# ESLint & Prettier Analysis Report\n\n**Generated:** [Current Date and Time]  \n**Project:** [Project Name from package.json]  \n**Total Files Analyzed:** [Number]  \n**Auto-fixes Applied:** [Number]\n\n## Executive Summary\n\n- **Formatting Issues Fixed:** [Number] files reformatted\n- **Auto-fixable Lint Issues:** [Number] issues resolved\n- **Remaining Issues:** [Number] errors, [Number] warnings\n- **Overall Health Score:** [Percentage based on remaining issues]\n\n## Automated Fixes Applied\n\n### Prettier Formatting Changes\n- Files modified: [List]\n- Types of changes: [Indentation, semicolons, quotes, etc.]\n\n### ESLint Auto-fixes\n- **Rules auto-fixed:** [List with counts]\n- **Files modified:** [List]\n- **Categories:** [Import/export, syntax, style, etc.]\n\n## Remaining Issues Analysis\n\n### Critical Errors (Must Fix)\n[For each error type:]\n#### [Rule Name] - [Count] occurrences\n**Severity:** Error  \n**Category:** [Logic/Syntax/Type/etc.]  \n**Root Cause:** [Explanation]  \n**Impact:** [Why this matters]\n\n**Affected Files:**\n- `[file:line:column]` - [Brief description]\n\n**Fix Recommendation:**\n```javascript\n// Before (problematic code)\n[example]\n\n// After (fixed code)\n[example]\n```\n\n**Priority:** High/Medium/Low\n\n---\n\n### Warnings (Should Fix)\n[Same structure as errors]\n\n## Fix Implementation Plan\n\n### Immediate Actions (High Priority)\n1. [Specific actionable item with file references]\n2. [Specific actionable item with file references]\n\n### Short-term Improvements (Medium Priority)\n1. [Specific actionable item]\n2. [Specific actionable item]\n\n### Long-term Enhancements (Low Priority)\n1. [Specific actionable item]\n2. [Specific actionable item]\n\n## Code Quality Metrics\n\n- **Error Density:** [Errors per 100 lines of code]\n- **Warning Density:** [Warnings per 100 lines of code]\n- **Most Problematic Files:** [Top 5 files with most issues]\n- **Most Common Issues:** [Top 5 rule violations]\n\n## Configuration Recommendations\n\n### ESLint Configuration Improvements\n```json\n// Suggested additions to .eslintrc.js\n[configuration suggestions]\n```\n\n### Prettier Configuration\n```json\n// Suggested .prettierrc settings\n[configuration suggestions]\n```\n\n## Next Steps\n\n1. **Immediate:** Fix all critical errors listed above\n2. **This Week:** Address high-priority warnings\n3. **This Month:** Implement configuration improvements\n4. **Ongoing:** Set up pre-commit hooks to prevent future issues\n\n## Commands to Run\n\n```bash\n# Fix specific issues\n[Provide specific commands for each major issue type]\n\n# Verify fixes\nnpm run lint\nnpm run format\n```\n\n---\n\n**Report End**\n\n## Execution Notes\n\n- Always create the `ESLint-report` directory if it doesn't exist\n- Include timestamps in filenames to avoid overwrites\n- Provide specific file paths and line numbers for all issues\n- Include working code examples for every recommendation\n- Test all suggested commands before including them in the report\n- If any command fails, document the error and provide alternatives"
  }
}